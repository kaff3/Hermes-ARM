%{

fun isComparison (Hermes.Bin (bop, e1, e2,p)) =
  List.exists
     (fn ope => ope = bop)
     [Hermes.Equal, Hermes.Less, Hermes.Greater,
      Hermes.Neq, Hermes.Leq, Hermes.Geq]
  | isComparison _ = false

%}

%token <string*(int*int)> NUM
%token <string*(int*int)> ID STRINGCONST
%token <(int*int)> ADD SUB XORWITH ROL ROR
%token <(int*int)> PLUS MINUS TIMES DIVIDE MODULO XOR BAND BOR SHIFTL SHIFTR
%token <(int*int)> EQUAL LESS GREATER NEQ LEQ GEQ BNOT INC DEC
%token <(int*int)> LPAR RPAR LBRACK RBRACK LBRACE RBRACE SEMICOLON COMMA
%token <(int*int)> IF THEN ELSE FOR EQ SIZE CALL UNCALL SWAP SECRET PUBLIC EOF
%token <(int*int)> U8 U16 U32 U64 CONST UNSAFE ASSERT ALLZERO MASTERSPACE

%right MASTERSPACE
%right ELSE FOR
%right COMMA
%left BOR XOR
%left BAND
%left EQUAL NEQ LESS GREATER LEQ GEQ
%left SHIFTL SHIFTR
%left PLUS MINUS
%left TIMES DIVIDE MODULO
%nonassoc BNOT


%start Program
%type <Hermes.program> Program
%type <Hermes.procedure> Procedure
%type <Hermes.stat> Stat
%type <Hermes.stat list> Stats
%type <Hermes.varType -> Hermes.decl> VarSpec
%type <Hermes.varType -> Hermes.decl list> VarSpecs
%type <Hermes.decl list> Decls1
%type <Hermes.arg list> Args
%type <Hermes.intType> IntType
%type <Hermes.valType> ValType
%type <Hermes.varType> VarType
%type <Hermes.exp> Exp
%type <Hermes.lVal> Lval
%type <Hermes.lVal list> Lvals
%type <Hermes.updateOp> UpdateOp

%%

Lval :	  ID		{ Hermes.Var $1 }
    	| ID LBRACK Exp RBRACK
	     		{ Hermes.Array (#1 $1, $3, $2) }
    	| UNSAFE ID LBRACK Exp RBRACK
	     		{ Hermes.UnsafeArray (#1 $2, $4, $1) }
;

Lvals :			{ [] }
	| Lval		{ [$1] }
	| Lval COMMA Lvals
			{ $1 :: $3 }
;

Exp :	  Lval		{ Hermes.Rval $1 }
	| NUM		{ Hermes.Const $1 }
	| Exp PLUS Exp	{ Hermes.Bin (Hermes.Plus, $1, $3, $2) }
	| Exp MINUS Exp	{ Hermes.Bin (Hermes.Minus, $1, $3, $2) }
	| Exp TIMES Exp	{ Hermes.Bin (Hermes.Times, $1, $3, $2) }
	| Exp DIVIDE Exp
	      	     	{ Hermes.Bin (Hermes.Divide, $1, $3, $2) }
	| Exp MODULO Exp
	      	     	{ Hermes.Bin (Hermes.Modulo, $1, $3, $2) }
	| Exp XOR Exp	{ Hermes.Bin (Hermes.Xor, $1, $3, $2) }
	| Exp BAND Exp	{ Hermes.Bin (Hermes.BAnd, $1, $3, $2) }
	| Exp BOR Exp	{ Hermes.Bin (Hermes.BOr, $1, $3, $2) }
	| Exp SHIFTL Exp
	      	     	{ Hermes.Bin (Hermes.ShiftL, $1, $3, $2) }
	| Exp SHIFTR Exp
	      	     	{ Hermes.Bin (Hermes.ShiftR, $1, $3, $2) }
	| Exp EQUAL Exp	{ Hermes.Bin (Hermes.Equal, $1, $3, $2) }
	| Exp NEQ Exp	{ Hermes.Bin (Hermes.Neq, $1, $3, $2) }
	| Exp GREATER Exp
                	{ Hermes.Bin (Hermes.Greater, $1, $3, $2) }
	| Exp LESS Exp	{ Hermes.Bin (Hermes.Less, $1, $3, $2) }
	| Exp LEQ Exp	{ Hermes.Bin (Hermes.Leq, $1, $3, $2) }
	| Exp GEQ Exp	{ Hermes.Bin (Hermes.Geq, $1, $3, $2) }
	| BNOT Exp	{ Hermes.Un (Hermes.Negate, $2, $1) }
	| SIZE ID	{ Hermes.Size (#1 $2, $1) }
    	| ALLZERO ID LBRACK Exp RBRACK
	     		{ Hermes.AllZero (#1 $2, $4, $1) }
        | LPAR Exp RPAR	{ $2 }
;

IntType : U8		{ Hermes.U8 }
	| U16		{ Hermes.U16 }
	| U32		{ Hermes.U32 }
	| U64		{ Hermes.U64 }
;

ValType : SECRET	{ Hermes.Secret }
	| PUBLIC	{ Hermes.Public }
	|		{ Hermes.Secret }
;

VarType : ValType IntType
			{ ($1, $2) }
;

VarSpec : ID		{ fn t => Hermes.VarDecl (#1 $1, t, #2 $1) }
	| ID LBRACK Exp RBRACK
			{ fn t => Hermes.ArrayDecl (#1 $1, t, $3, #2 $1) }
;

VarSpecs: VarSpec	{ fn t => [$1 t] }
	| VarSpec COMMA VarSpecs
			{ fn t => $1 t :: $3 t }
;

Decls1 :		{ [] }
	| VarType VarSpecs SEMICOLON Decls1
			{ $2 $1 @ $4 }
        | CONST ID EQ NUM SEMICOLON Decls1
                        { Hermes.ConstDecl (#1 $2, #1 $4, $1) :: $6}
;

UpdateOp: ADD		{ Hermes.Add }
	| SUB		{ Hermes.Sub }
	| XORWITH	{ Hermes.XorWith }
	| ROL		{ Hermes.RoL }
	| ROR		{ Hermes.RoR }
;

Stat :	  SEMICOLON	{ Hermes.Skip }
	| Lval UpdateOp Exp SEMICOLON
			{ Hermes.Update ($2, $1, $3, $4) }
	| Lval INC SEMICOLON
			{ Hermes.Update (Hermes.Add,
                                         $1,
                                         Hermes.Const ("1", $2),
                                         $2) }
	| Lval DEC SEMICOLON
			{ Hermes.Update (Hermes.Sub,
                                         $1,
                                         Hermes.Const ("1", $2),
                                         $2) }
	| IF LPAR Exp RPAR Stat ELSE Stat
	                { Hermes.If ($3, $5, $7, $1) }
	| IF LPAR Exp RPAR Stat %prec ELSE
	                {
			  case $5 of
			    Hermes.Update (uop,lv,ex,p) =>
			      if isComparison $3 then
			        Hermes.Update
				  (uop, lv,
				   Hermes.Bin (Hermes.BAnd, $3, ex, $1), p)
		              else
			        Hermes.Update
				  (uop, lv,
				   Hermes.Bin
				     (Hermes.BAnd,
				        Hermes.Bin
				         (Hermes.Neq, $3,
					  Hermes.Const ("0",$2), $2),
				      ex, $1),
				   p)
		          | Hermes.Swap (lv1, lv2,p) =>
			       Hermes.CondSwap ($3, lv1, lv2, $1)
			  | _ => Hermes.If ($3, $5, Hermes.Skip, $1)
			}
	| Lval SWAP Lval SEMICOLON
			{ Hermes.Swap ($1, $3, $2) }
	| LBRACE Decls1 Stats RBRACE
			{ Hermes.Block ($2, $3, $1) }
	| FOR LPAR ID EQ Exp SEMICOLON Exp RPAR Stat %prec FOR
			{ Hermes.For (#1 $3, $5, $7, $9, $1) }
	| CALL ID LPAR Lvals RPAR SEMICOLON
			{ Hermes.Call (#1 $2, $4, $1) }
	| UNCALL ID LPAR Lvals RPAR SEMICOLON
			{ Hermes.Uncall (#1 $2, $4, $1) }
	| ASSERT Exp SEMICOLON
			{ Hermes.Assert ($2, $1) }
	| Stat MASTERSPACE Stat
	       		{ Hermes.Block ([],[$1,$3,Hermes.R $1],$2) }
;

Stats :			{ [] }
	| Stat Stats	{ $1 :: $2 }
;

Args :	  VarType ID	{ [Hermes.VarArg (#1 $2, $1, #2 $2)] }
	| VarType ID LBRACK RBRACK
			{ [Hermes.ArrayArg (#1 $2, $1,#2 $2)] }
	| Args COMMA Args
			{ $1 @ $3 }
;

Procedure : ID LPAR Args RPAR Stat
			{ (#1 $1, $3, $5, $2) }
;

Program : Procedure EOF	{ [$1] }
	| Procedure Program
			{ $1 :: $2 }
;
