local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = (int*int)
type t__5__ = (int*int)
type t__6__ = (int*int)
type t__7__ = (int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = (int*int)
type t__13__ = (int*int)
type t__14__ = (int*int)
type t__15__ = (int*int)
type t__16__ = (int*int)
type t__17__ = (int*int)
type t__18__ = (int*int)
type t__19__ = string*(int*int)
type t__20__ = (int*int)
type t__21__ = (int*int)
type t__22__ = (int*int)
type t__23__ = (int*int)
type t__24__ = (int*int)
type t__25__ = (int*int)
type t__26__ = (int*int)
type t__27__ = (int*int)
type t__28__ = (int*int)
type t__29__ = (int*int)
type t__30__ = (int*int)
type t__31__ = string*(int*int)
type t__32__ = (int*int)
type t__33__ = (int*int)
type t__34__ = (int*int)
type t__35__ = (int*int)
type t__36__ = (int*int)
type t__37__ = (int*int)
type t__38__ = (int*int)
type t__39__ = (int*int)
type t__40__ = (int*int)
type t__41__ = (int*int)
type t__42__ = (int*int)
type t__43__ = (int*int)
type t__44__ = string*(int*int)
type t__45__ = (int*int)
type t__46__ = (int*int)
type t__47__ = (int*int)
type t__48__ = (int*int)
type t__49__ = (int*int)
type t__50__ = (int*int)
type t__51__ = (int*int)
type t__52__ = (int*int)
type t__53__ = (int*int)
type t__54__ = (int*int)
type t__55__ = (int*int)
type t__56__ = (int*int)
in
datatype token =
    ADD of t__1__
  | ALLZERO of t__2__
  | ASSERT of t__3__
  | BAND of t__4__
  | BNOT of t__5__
  | BOR of t__6__
  | CALL of t__7__
  | COMMA of t__8__
  | CONST of t__9__
  | DEC of t__10__
  | DIVIDE of t__11__
  | ELSE of t__12__
  | EOF of t__13__
  | EQ of t__14__
  | EQUAL of t__15__
  | FOR of t__16__
  | GEQ of t__17__
  | GREATER of t__18__
  | ID of t__19__
  | IF of t__20__
  | INC of t__21__
  | LBRACE of t__22__
  | LBRACK of t__23__
  | LEQ of t__24__
  | LESS of t__25__
  | LPAR of t__26__
  | MASTERSPACE of t__27__
  | MINUS of t__28__
  | MODULO of t__29__
  | NEQ of t__30__
  | NUM of t__31__
  | PLUS of t__32__
  | PUBLIC of t__33__
  | RBRACE of t__34__
  | RBRACK of t__35__
  | ROL of t__36__
  | ROR of t__37__
  | RPAR of t__38__
  | SECRET of t__39__
  | SEMICOLON of t__40__
  | SHIFTL of t__41__
  | SHIFTR of t__42__
  | SIZE of t__43__
  | STRINGCONST of t__44__
  | SUB of t__45__
  | SWAP of t__46__
  | THEN of t__47__
  | TIMES of t__48__
  | U16 of t__49__
  | U32 of t__50__
  | U64 of t__51__
  | U8 of t__52__
  | UNCALL of t__53__
  | UNSAFE of t__54__
  | XOR of t__55__
  | XORWITH of t__56__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";


fun isComparison (Hermes.Bin (bop, e1, e2,p)) =
  List.exists
     (fn ope => ope = bop)
     [Hermes.Equal, Hermes.Less, Hermes.Greater,
      Hermes.Neq, Hermes.Leq, Hermes.Geq]
  | isComparison _ = false

(* Line 14, file HermesParser.sml *)
val yytransl = #[
  257 (* ADD *),
  258 (* ALLZERO *),
  259 (* ASSERT *),
  260 (* BAND *),
  261 (* BNOT *),
  262 (* BOR *),
  263 (* CALL *),
  264 (* COMMA *),
  265 (* CONST *),
  266 (* DEC *),
  267 (* DIVIDE *),
  268 (* ELSE *),
  269 (* EOF *),
  270 (* EQ *),
  271 (* EQUAL *),
  272 (* FOR *),
  273 (* GEQ *),
  274 (* GREATER *),
  275 (* ID *),
  276 (* IF *),
  277 (* INC *),
  278 (* LBRACE *),
  279 (* LBRACK *),
  280 (* LEQ *),
  281 (* LESS *),
  282 (* LPAR *),
  283 (* MASTERSPACE *),
  284 (* MINUS *),
  285 (* MODULO *),
  286 (* NEQ *),
  287 (* NUM *),
  288 (* PLUS *),
  289 (* PUBLIC *),
  290 (* RBRACE *),
  291 (* RBRACK *),
  292 (* ROL *),
  293 (* ROR *),
  294 (* RPAR *),
  295 (* SECRET *),
  296 (* SEMICOLON *),
  297 (* SHIFTL *),
  298 (* SHIFTR *),
  299 (* SIZE *),
  300 (* STRINGCONST *),
  301 (* SUB *),
  302 (* SWAP *),
  303 (* THEN *),
  304 (* TIMES *),
  305 (* U16 *),
  306 (* U32 *),
  307 (* U64 *),
  308 (* U8 *),
  309 (* UNCALL *),
  310 (* UNSAFE *),
  311 (* XOR *),
  312 (* XORWITH *),
    0];

val yylhs = "\255\255\
\\013\000\013\000\013\000\014\000\014\000\014\000\012\000\012\000\
\\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\\012\000\012\000\012\000\012\000\009\000\009\000\009\000\009\000\
\\010\000\010\000\010\000\011\000\005\000\005\000\006\000\006\000\
\\007\000\007\000\007\000\015\000\015\000\015\000\015\000\015\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\004\000\004\000\008\000\
\\008\000\008\000\002\000\001\000\001\000\000\000";

val yylen = "\002\000\
\\001\000\004\000\005\000\000\000\001\000\003\000\001\000\001\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\002\000\002\000\005\000\003\000\001\000\001\000\001\000\001\000\
\\001\000\001\000\000\000\002\000\001\000\004\000\001\000\003\000\
\\000\000\004\000\006\000\001\000\001\000\001\000\001\000\001\000\
\\001\000\004\000\003\000\003\000\007\000\005\000\004\000\004\000\
\\009\000\006\000\006\000\003\000\003\000\000\000\002\000\002\000\
\\004\000\003\000\005\000\002\000\002\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\070\000\000\000\000\000\068\000\069\000\
\\034\000\033\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\031\000\032\000\029\000\036\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\044\000\000\000\000\000\047\000\048\000\
\\045\000\000\000\046\000\000\000\065\000\000\000\000\000\000\000\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\\051\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\002\000\000\000\000\000\063\000\056\000\000\000\000\000\000\000\
\\000\000\000\000\055\000\050\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\040\000\042\000\000\000\003\000\027\000\
\\006\000\058\000\000\000\000\000\000\000\038\000\059\000\000\000\
\\000\000\043\000\000\000\000\000";

val yydgoto = "\002\000\
\\004\000\005\000\088\000\089\000\091\000\092\000\047\000\011\000\
\\020\000\012\000\048\000\040\000\041\000\119\000\060\000";

val yysindex = "\008\000\
\\248\254\000\000\243\254\000\000\249\254\231\254\000\000\000\000\
\\000\000\000\000\075\255\235\254\255\254\231\254\086\002\000\000\
\\000\000\000\000\000\000\000\000\011\255\014\255\039\255\052\255\
\\050\255\054\255\053\255\138\255\000\000\062\255\066\255\064\255\
\\065\255\059\255\069\255\039\255\039\255\000\000\070\255\057\000\
\\000\000\072\255\077\255\039\255\039\255\080\255\086\002\084\255\
\\078\255\082\255\086\002\000\000\074\255\076\255\000\000\000\000\
\\000\000\240\254\000\000\039\255\000\000\100\255\000\000\089\000\
\\000\000\039\255\039\255\039\255\039\255\039\255\039\255\039\255\
\\039\255\039\255\039\255\039\255\039\255\000\000\039\255\039\255\
\\039\255\039\255\240\254\112\255\118\000\150\000\116\255\152\001\
\\094\255\113\255\129\255\105\255\240\254\039\255\064\255\000\000\
\\000\000\108\255\179\000\039\255\000\000\003\003\237\002\000\000\
\\162\255\162\255\162\255\162\255\162\255\061\255\000\000\162\255\
\\061\255\247\254\247\254\000\000\237\002\145\255\119\255\039\255\
\\000\000\086\002\127\255\000\000\000\000\039\255\084\255\138\255\
\\140\255\211\000\000\000\000\000\243\000\240\254\136\255\019\001\
\\168\255\139\255\051\001\000\000\000\000\143\255\000\000\000\000\
\\000\000\000\000\039\255\086\002\138\255\000\000\000\000\083\001\
\\000\000\000\000\086\002\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\115\255\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\115\255\000\000\000\000\
\\000\000\000\000\000\000\000\000\079\255\146\255\000\000\000\000\
\\000\000\114\255\000\000\175\001\000\000\000\000\000\000\008\255\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\154\255\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\157\255\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\155\255\000\000\000\000\000\000\000\000\154\255\
\\000\000\002\255\156\255\000\000\155\255\000\000\075\002\000\000\
\\000\000\000\000\000\000\000\000\000\000\029\255\057\255\196\255\
\\020\002\095\002\128\002\155\002\182\002\112\001\235\255\209\002\
\\145\001\215\001\243\001\018\000\056\000\163\255\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\001\
\\000\000\000\000\000\000\000\000\000\000\155\255\000\000\000\000\
\\189\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\175\001\000\000\000\000\000\000\
\\027\002\000\000\000\000\050\002";

val yygindex = "\000\000\
\\201\000\000\000\242\255\120\000\000\000\082\000\133\255\202\000\
\\000\000\000\000\001\000\236\255\241\255\167\255\000\000";

val YYTABLESIZE = 1075;
val yytable = "\033\000\
\\032\000\068\000\026\000\129\000\141\000\007\000\013\000\009\000\
\\001\000\037\000\003\000\003\000\006\000\010\000\013\000\063\000\
\\064\000\021\000\074\000\075\000\067\000\014\000\077\000\085\000\
\\086\000\154\000\067\000\016\000\017\000\018\000\019\000\033\000\
\\015\000\034\000\015\000\033\000\095\000\031\000\081\000\099\000\
\\035\000\037\000\098\000\036\000\145\000\102\000\103\000\104\000\
\\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\\113\000\026\000\114\000\115\000\116\000\117\000\016\000\015\000\
\\037\000\052\000\015\000\118\000\015\000\038\000\042\000\068\000\
\\033\000\130\000\053\000\043\000\044\000\118\000\045\000\133\000\
\\049\000\039\000\014\000\015\000\050\000\054\000\064\000\062\000\
\\065\000\075\000\051\000\016\000\031\000\061\000\016\000\084\000\
\\016\000\083\000\087\000\136\000\055\000\056\000\090\000\093\000\
\\094\000\139\000\033\000\137\000\081\000\057\000\058\000\016\000\
\\015\000\096\000\001\000\097\000\064\000\001\000\118\000\001\000\
\\059\000\001\000\100\000\001\000\001\000\120\000\152\000\125\000\
\\001\000\123\000\001\000\001\000\033\000\153\000\001\000\126\000\
\\127\000\001\000\001\000\033\000\156\000\001\000\001\000\001\000\
\\128\000\001\000\046\000\131\000\001\000\001\000\001\000\001\000\
\\134\000\001\000\001\000\001\000\135\000\138\000\001\000\001\000\
\\025\000\001\000\025\000\035\000\035\000\035\000\035\000\025\000\
\\001\000\001\000\009\000\025\000\068\000\025\000\025\000\146\000\
\\010\000\142\000\149\000\148\000\025\000\025\000\151\000\066\000\
\\025\000\025\000\025\000\062\000\025\000\074\000\075\000\025\000\
\\004\000\077\000\025\000\039\000\025\000\025\000\025\000\012\000\
\\005\000\012\000\079\000\080\000\025\000\008\000\012\000\124\000\
\\140\000\081\000\012\000\025\000\012\000\012\000\000\000\022\000\
\\000\000\000\000\000\000\012\000\012\000\000\000\000\000\012\000\
\\012\000\012\000\000\000\012\000\000\000\000\000\012\000\000\000\
\\000\000\012\000\000\000\012\000\012\000\012\000\013\000\000\000\
\\013\000\000\000\000\000\012\000\000\000\013\000\000\000\000\000\
\\000\000\013\000\012\000\013\000\013\000\000\000\000\000\000\000\
\\000\000\000\000\013\000\013\000\000\000\000\000\013\000\013\000\
\\013\000\000\000\013\000\000\000\000\000\013\000\000\000\000\000\
\\013\000\000\000\013\000\013\000\013\000\011\000\000\000\011\000\
\\000\000\000\000\013\000\000\000\011\000\000\000\000\000\000\000\
\\011\000\013\000\011\000\011\000\000\000\000\000\000\000\000\000\
\\000\000\011\000\011\000\000\000\000\000\011\000\011\000\011\000\
\\000\000\011\000\000\000\000\000\011\000\000\000\000\000\011\000\
\\000\000\011\000\011\000\011\000\066\000\014\000\067\000\000\000\
\\000\000\011\000\000\000\068\000\000\000\000\000\000\000\069\000\
\\011\000\070\000\071\000\000\000\000\000\000\000\000\000\000\000\
\\072\000\073\000\000\000\000\000\074\000\075\000\076\000\000\000\
\\077\000\000\000\014\000\000\000\066\000\014\000\067\000\014\000\
\\078\000\079\000\080\000\068\000\000\000\000\000\000\000\069\000\
\\081\000\070\000\071\000\000\000\000\000\000\000\014\000\082\000\
\\072\000\073\000\000\000\000\000\074\000\075\000\076\000\000\000\
\\077\000\066\000\000\000\067\000\000\000\000\000\101\000\000\000\
\\068\000\079\000\080\000\000\000\069\000\000\000\070\000\071\000\
\\081\000\000\000\000\000\000\000\000\000\072\000\073\000\082\000\
\\000\000\074\000\075\000\076\000\000\000\077\000\000\000\000\000\
\\121\000\066\000\000\000\067\000\000\000\000\000\079\000\080\000\
\\068\000\000\000\000\000\000\000\069\000\081\000\070\000\071\000\
\\000\000\000\000\000\000\000\000\082\000\072\000\073\000\000\000\
\\000\000\074\000\075\000\076\000\000\000\077\000\066\000\000\000\
\\067\000\000\000\000\000\122\000\000\000\068\000\079\000\080\000\
\\000\000\069\000\000\000\070\000\071\000\081\000\000\000\000\000\
\\000\000\000\000\072\000\073\000\082\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\000\000\066\000\000\000\
\\067\000\000\000\132\000\079\000\080\000\068\000\000\000\000\000\
\\000\000\069\000\081\000\070\000\071\000\000\000\000\000\000\000\
\\000\000\082\000\072\000\073\000\000\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\143\000\066\000\000\000\
\\067\000\000\000\000\000\079\000\080\000\068\000\000\000\000\000\
\\000\000\069\000\081\000\070\000\071\000\000\000\000\000\000\000\
\\000\000\082\000\072\000\073\000\000\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\144\000\066\000\000\000\
\\067\000\000\000\000\000\079\000\080\000\068\000\000\000\000\000\
\\000\000\069\000\081\000\070\000\071\000\000\000\000\000\000\000\
\\000\000\082\000\072\000\073\000\000\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\000\000\066\000\000\000\
\\067\000\000\000\147\000\079\000\080\000\068\000\000\000\000\000\
\\000\000\069\000\081\000\070\000\071\000\000\000\000\000\000\000\
\\000\000\082\000\072\000\073\000\000\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\150\000\066\000\000\000\
\\067\000\000\000\000\000\079\000\080\000\068\000\000\000\000\000\
\\000\000\069\000\081\000\070\000\071\000\000\000\000\000\000\000\
\\000\000\082\000\072\000\073\000\000\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\010\000\000\000\010\000\000\000\000\000\
\\155\000\000\000\000\000\079\000\080\000\000\000\010\000\000\000\
\\010\000\010\000\081\000\000\000\000\000\000\000\000\000\010\000\
\\010\000\082\000\000\000\010\000\000\000\010\000\000\000\010\000\
\\000\000\000\000\010\000\000\000\009\000\010\000\009\000\010\000\
\\010\000\010\000\023\000\000\000\000\000\000\000\024\000\009\000\
\\000\000\009\000\009\000\000\000\000\000\000\000\010\000\025\000\
\\009\000\009\000\026\000\027\000\009\000\028\000\009\000\000\000\
\\009\000\041\000\051\000\009\000\000\000\041\000\009\000\000\000\
\\009\000\009\000\009\000\000\000\000\000\000\000\041\000\029\000\
\\000\000\041\000\041\000\000\000\041\000\000\000\000\000\009\000\
\\000\000\000\000\000\000\000\000\030\000\031\000\000\000\000\000\
\\041\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\\000\000\000\000\017\000\000\000\017\000\000\000\000\000\035\000\
\\035\000\035\000\035\000\041\000\041\000\017\000\000\000\017\000\
\\017\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
\\000\000\000\000\000\000\000\000\017\000\000\000\018\000\000\000\
\\018\000\017\000\000\000\000\000\017\000\000\000\017\000\017\000\
\\017\000\018\000\000\000\018\000\018\000\000\000\000\000\000\000\
\\000\000\000\000\018\000\018\000\000\000\017\000\000\000\000\000\
\\018\000\000\000\000\000\000\000\000\000\018\000\000\000\019\000\
\\018\000\019\000\018\000\018\000\018\000\053\000\000\000\000\000\
\\000\000\053\000\019\000\000\000\019\000\019\000\053\000\053\000\
\\000\000\018\000\053\000\019\000\019\000\053\000\053\000\000\000\
\\053\000\019\000\000\000\000\000\057\000\053\000\019\000\000\000\
\\057\000\019\000\000\000\019\000\053\000\057\000\057\000\000\000\
\\000\000\057\000\053\000\000\000\057\000\057\000\000\000\057\000\
\\000\000\000\000\019\000\000\000\057\000\061\000\000\000\053\000\
\\053\000\061\000\000\000\057\000\000\000\000\000\061\000\061\000\
\\023\000\057\000\061\000\000\000\024\000\061\000\061\000\000\000\
\\061\000\000\000\024\000\000\000\024\000\025\000\057\000\057\000\
\\026\000\027\000\000\000\028\000\061\000\024\000\000\000\024\000\
\\024\000\000\000\061\000\000\000\000\000\000\000\024\000\024\000\
\\000\000\000\000\000\000\000\000\024\000\029\000\000\000\061\000\
\\061\000\024\000\000\000\021\000\024\000\021\000\024\000\000\000\
\\000\000\000\000\030\000\031\000\000\000\000\000\021\000\000\000\
\\021\000\021\000\000\000\000\000\000\000\024\000\000\000\021\000\
\\021\000\000\000\000\000\000\000\000\000\021\000\023\000\000\000\
\\023\000\000\000\021\000\000\000\000\000\021\000\000\000\021\000\
\\000\000\023\000\000\000\023\000\023\000\000\000\000\000\000\000\
\\000\000\000\000\023\000\023\000\000\000\000\000\021\000\000\000\
\\023\000\022\000\000\000\022\000\000\000\023\000\000\000\054\000\
\\023\000\000\000\023\000\054\000\022\000\000\000\022\000\022\000\
\\000\000\054\000\000\000\000\000\054\000\022\000\022\000\054\000\
\\054\000\023\000\054\000\022\000\020\000\000\000\020\000\054\000\
\\022\000\000\000\000\000\022\000\000\000\022\000\054\000\020\000\
\\000\000\020\000\020\000\000\000\054\000\000\000\000\000\000\000\
\\020\000\020\000\000\000\000\000\022\000\000\000\020\000\000\000\
\\066\000\054\000\054\000\020\000\000\000\000\000\020\000\068\000\
\\020\000\000\000\000\000\069\000\000\000\070\000\071\000\000\000\
\\000\000\000\000\000\000\000\000\072\000\073\000\000\000\020\000\
\\074\000\075\000\076\000\000\000\077\000\068\000\000\000\000\000\
\\000\000\069\000\000\000\070\000\071\000\079\000\080\000\000\000\
\\000\000\000\000\072\000\073\000\081\000\000\000\074\000\075\000\
\\076\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\079\000\080\000\000\000\000\000\000\000\
\\000\000\000\000\081\000";

val yycheck = "\015\000\
\\015\000\011\001\019\001\093\000\128\000\013\001\006\000\033\001\
\\001\000\008\001\019\001\019\001\026\001\039\001\014\000\036\000\
\\037\000\019\001\028\001\029\001\013\001\008\001\032\001\044\000\
\\045\000\149\000\019\001\049\001\050\001\051\001\052\001\047\000\
\\004\001\023\001\006\001\051\000\051\000\054\001\048\001\060\000\
\\002\001\040\001\058\000\005\001\134\000\066\000\067\000\068\000\
\\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\\077\000\019\001\079\000\080\000\081\000\082\000\006\001\035\001\
\\026\001\001\001\038\001\083\000\040\001\031\001\019\001\011\001\
\\088\000\094\000\010\001\026\001\023\001\093\000\026\001\100\000\
\\019\001\043\001\008\001\055\001\019\001\021\001\008\001\019\001\
\\019\001\029\001\027\001\035\001\054\001\035\001\038\001\019\001\
\\040\001\026\001\019\001\120\000\036\001\037\001\019\001\026\001\
\\023\001\126\000\122\000\122\000\048\001\045\001\046\001\055\001\
\\038\001\040\001\001\001\040\001\038\001\004\001\134\000\006\001\
\\056\001\008\001\023\001\010\001\011\001\014\001\147\000\034\001\
\\015\001\014\001\017\001\018\001\148\000\148\000\021\001\023\001\
\\008\001\024\001\025\001\155\000\155\000\028\001\029\001\030\001\
\\040\001\032\001\009\001\040\001\035\001\036\001\037\001\038\001\
\\008\001\040\001\041\001\042\001\038\001\031\001\045\001\046\001\
\\004\001\048\001\006\001\049\001\050\001\051\001\052\001\011\001\
\\055\001\056\001\033\001\015\001\011\001\017\001\018\001\040\001\
\\039\001\038\001\040\001\012\001\024\001\025\001\040\001\038\001\
\\028\001\029\001\030\001\034\001\032\001\028\001\029\001\035\001\
\\038\001\032\001\038\001\040\001\040\001\041\001\042\001\004\001\
\\038\001\006\001\041\001\042\001\048\001\005\000\011\001\088\000\
\\127\000\048\001\015\001\055\001\017\001\018\001\255\255\014\000\
\\255\255\255\255\255\255\024\001\025\001\255\255\255\255\028\001\
\\029\001\030\001\255\255\032\001\255\255\255\255\035\001\255\255\
\\255\255\038\001\255\255\040\001\041\001\042\001\004\001\255\255\
\\006\001\255\255\255\255\048\001\255\255\011\001\255\255\255\255\
\\255\255\015\001\055\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\255\255\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\035\001\255\255\255\255\
\\038\001\255\255\040\001\041\001\042\001\004\001\255\255\006\001\
\\255\255\255\255\048\001\255\255\011\001\255\255\255\255\255\255\
\\015\001\055\001\017\001\018\001\255\255\255\255\255\255\255\255\
\\255\255\024\001\025\001\255\255\255\255\028\001\029\001\030\001\
\\255\255\032\001\255\255\255\255\035\001\255\255\255\255\038\001\
\\255\255\040\001\041\001\042\001\004\001\006\001\006\001\255\255\
\\255\255\048\001\255\255\011\001\255\255\255\255\255\255\015\001\
\\055\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\\032\001\255\255\035\001\255\255\004\001\038\001\006\001\040\001\
\\040\001\041\001\042\001\011\001\255\255\255\255\255\255\015\001\
\\048\001\017\001\018\001\255\255\255\255\255\255\055\001\055\001\
\\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\\032\001\004\001\255\255\006\001\255\255\255\255\038\001\255\255\
\\011\001\041\001\042\001\255\255\015\001\255\255\017\001\018\001\
\\048\001\255\255\255\255\255\255\255\255\024\001\025\001\055\001\
\\255\255\028\001\029\001\030\001\255\255\032\001\255\255\255\255\
\\035\001\004\001\255\255\006\001\255\255\255\255\041\001\042\001\
\\011\001\255\255\255\255\255\255\015\001\048\001\017\001\018\001\
\\255\255\255\255\255\255\255\255\055\001\024\001\025\001\255\255\
\\255\255\028\001\029\001\030\001\255\255\032\001\004\001\255\255\
\\006\001\255\255\255\255\038\001\255\255\011\001\041\001\042\001\
\\255\255\015\001\255\255\017\001\018\001\048\001\255\255\255\255\
\\255\255\255\255\024\001\025\001\055\001\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\255\255\004\001\255\255\
\\006\001\255\255\040\001\041\001\042\001\011\001\255\255\255\255\
\\255\255\015\001\048\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\055\001\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\035\001\004\001\255\255\
\\006\001\255\255\255\255\041\001\042\001\011\001\255\255\255\255\
\\255\255\015\001\048\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\055\001\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\035\001\004\001\255\255\
\\006\001\255\255\255\255\041\001\042\001\011\001\255\255\255\255\
\\255\255\015\001\048\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\055\001\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\255\255\004\001\255\255\
\\006\001\255\255\040\001\041\001\042\001\011\001\255\255\255\255\
\\255\255\015\001\048\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\055\001\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\035\001\004\001\255\255\
\\006\001\255\255\255\255\041\001\042\001\011\001\255\255\255\255\
\\255\255\015\001\048\001\017\001\018\001\255\255\255\255\255\255\
\\255\255\055\001\024\001\025\001\255\255\255\255\028\001\029\001\
\\030\001\255\255\032\001\004\001\255\255\006\001\255\255\255\255\
\\038\001\255\255\255\255\041\001\042\001\255\255\015\001\255\255\
\\017\001\018\001\048\001\255\255\255\255\255\255\255\255\024\001\
\\025\001\055\001\255\255\028\001\255\255\030\001\255\255\032\001\
\\255\255\255\255\035\001\255\255\004\001\038\001\006\001\040\001\
\\041\001\042\001\003\001\255\255\255\255\255\255\007\001\015\001\
\\255\255\017\001\018\001\255\255\255\255\255\255\055\001\016\001\
\\024\001\025\001\019\001\020\001\028\001\022\001\030\001\255\255\
\\032\001\003\001\027\001\035\001\255\255\007\001\038\001\255\255\
\\040\001\041\001\042\001\255\255\255\255\255\255\016\001\040\001\
\\255\255\019\001\020\001\255\255\022\001\255\255\255\255\055\001\
\\255\255\255\255\255\255\255\255\053\001\054\001\255\255\255\255\
\\034\001\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\\255\255\255\255\004\001\255\255\006\001\255\255\255\255\049\001\
\\050\001\051\001\052\001\053\001\054\001\015\001\255\255\017\001\
\\018\001\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\\255\255\255\255\255\255\255\255\030\001\255\255\004\001\255\255\
\\006\001\035\001\255\255\255\255\038\001\255\255\040\001\041\001\
\\042\001\015\001\255\255\017\001\018\001\255\255\255\255\255\255\
\\255\255\255\255\024\001\025\001\255\255\055\001\255\255\255\255\
\\030\001\255\255\255\255\255\255\255\255\035\001\255\255\004\001\
\\038\001\006\001\040\001\041\001\042\001\003\001\255\255\255\255\
\\255\255\007\001\015\001\255\255\017\001\018\001\012\001\013\001\
\\255\255\055\001\016\001\024\001\025\001\019\001\020\001\255\255\
\\022\001\030\001\255\255\255\255\003\001\027\001\035\001\255\255\
\\007\001\038\001\255\255\040\001\034\001\012\001\013\001\255\255\
\\255\255\016\001\040\001\255\255\019\001\020\001\255\255\022\001\
\\255\255\255\255\055\001\255\255\027\001\003\001\255\255\053\001\
\\054\001\007\001\255\255\034\001\255\255\255\255\012\001\013\001\
\\003\001\040\001\016\001\255\255\007\001\019\001\020\001\255\255\
\\022\001\255\255\004\001\255\255\006\001\016\001\053\001\054\001\
\\019\001\020\001\255\255\022\001\034\001\015\001\255\255\017\001\
\\018\001\255\255\040\001\255\255\255\255\255\255\024\001\025\001\
\\255\255\255\255\255\255\255\255\030\001\040\001\255\255\053\001\
\\054\001\035\001\255\255\004\001\038\001\006\001\040\001\255\255\
\\255\255\255\255\053\001\054\001\255\255\255\255\015\001\255\255\
\\017\001\018\001\255\255\255\255\255\255\055\001\255\255\024\001\
\\025\001\255\255\255\255\255\255\255\255\030\001\004\001\255\255\
\\006\001\255\255\035\001\255\255\255\255\038\001\255\255\040\001\
\\255\255\015\001\255\255\017\001\018\001\255\255\255\255\255\255\
\\255\255\255\255\024\001\025\001\255\255\255\255\055\001\255\255\
\\030\001\004\001\255\255\006\001\255\255\035\001\255\255\003\001\
\\038\001\255\255\040\001\007\001\015\001\255\255\017\001\018\001\
\\255\255\013\001\255\255\255\255\016\001\024\001\025\001\019\001\
\\020\001\055\001\022\001\030\001\004\001\255\255\006\001\027\001\
\\035\001\255\255\255\255\038\001\255\255\040\001\034\001\015\001\
\\255\255\017\001\018\001\255\255\040\001\255\255\255\255\255\255\
\\024\001\025\001\255\255\255\255\055\001\255\255\030\001\255\255\
\\004\001\053\001\054\001\035\001\255\255\255\255\038\001\011\001\
\\040\001\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\\255\255\255\255\255\255\255\255\024\001\025\001\255\255\055\001\
\\028\001\029\001\030\001\255\255\032\001\011\001\255\255\255\255\
\\255\255\015\001\255\255\017\001\018\001\041\001\042\001\255\255\
\\255\255\255\255\024\001\025\001\048\001\255\255\028\001\029\001\
\\030\001\255\255\032\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\041\001\042\001\255\255\255\255\255\255\
\\255\255\255\255\048\001";

val yyact = vector_ 71 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file HermesParser.grm, line 52 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Hermes.Var (d__1__) ) end : Hermes.lVal))
;
(* Rule 2, file HermesParser.grm, line 54 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Hermes.exp
val d__4__ = peekVal 0 : (int*int)
in
( Hermes.Array (#1 (d__1__), (d__3__), (d__2__)) ) end : Hermes.lVal))
;
(* Rule 3, file HermesParser.grm, line 56 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : string*(int*int)
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : Hermes.exp
val d__5__ = peekVal 0 : (int*int)
in
( Hermes.UnsafeArray (#1 (d__2__), (d__4__), (d__1__)) ) end : Hermes.lVal))
;
(* Rule 4, file HermesParser.grm, line 59 *)
val _ = update_ yyact 4
(fn () => repr(let
in
( [] ) end : Hermes.lVal list))
;
(* Rule 5, file HermesParser.grm, line 60 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : Hermes.lVal
in
( [(d__1__)] ) end : Hermes.lVal list))
;
(* Rule 6, file HermesParser.grm, line 62 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.lVal
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.lVal list
in
( (d__1__) :: (d__3__) ) end : Hermes.lVal list))
;
(* Rule 7, file HermesParser.grm, line 65 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 0 : Hermes.lVal
in
( Hermes.Rval (d__1__) ) end : Hermes.exp))
;
(* Rule 8, file HermesParser.grm, line 66 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Hermes.Const (d__1__) ) end : Hermes.exp))
;
(* Rule 9, file HermesParser.grm, line 67 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Plus, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 10, file HermesParser.grm, line 68 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Minus, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 11, file HermesParser.grm, line 69 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Times, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 12, file HermesParser.grm, line 71 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Divide, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 13, file HermesParser.grm, line 73 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Modulo, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 14, file HermesParser.grm, line 74 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Xor, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 15, file HermesParser.grm, line 75 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.BAnd, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 16, file HermesParser.grm, line 76 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.BOr, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 17, file HermesParser.grm, line 78 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.ShiftL, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 18, file HermesParser.grm, line 80 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.ShiftR, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 19, file HermesParser.grm, line 81 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Equal, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 20, file HermesParser.grm, line 82 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Neq, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 21, file HermesParser.grm, line 84 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Greater, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 22, file HermesParser.grm, line 85 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Less, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 23, file HermesParser.grm, line 86 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Leq, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 24, file HermesParser.grm, line 87 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.exp
in
( Hermes.Bin (Hermes.Geq, (d__1__), (d__3__), (d__2__)) ) end : Hermes.exp))
;
(* Rule 25, file HermesParser.grm, line 88 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Hermes.exp
in
( Hermes.Un (Hermes.Negate, (d__2__), (d__1__)) ) end : Hermes.exp))
;
(* Rule 26, file HermesParser.grm, line 89 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : string*(int*int)
in
( Hermes.Size (#1 (d__2__), (d__1__)) ) end : Hermes.exp))
;
(* Rule 27, file HermesParser.grm, line 91 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : string*(int*int)
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : Hermes.exp
val d__5__ = peekVal 0 : (int*int)
in
( Hermes.AllZero (#1 (d__2__), (d__4__), (d__1__)) ) end : Hermes.exp))
;
(* Rule 28, file HermesParser.grm, line 92 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Hermes.exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Hermes.exp))
;
(* Rule 29, file HermesParser.grm, line 95 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.U8 ) end : Hermes.intType))
;
(* Rule 30, file HermesParser.grm, line 96 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.U16 ) end : Hermes.intType))
;
(* Rule 31, file HermesParser.grm, line 97 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.U32 ) end : Hermes.intType))
;
(* Rule 32, file HermesParser.grm, line 98 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.U64 ) end : Hermes.intType))
;
(* Rule 33, file HermesParser.grm, line 101 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.Secret ) end : Hermes.valType))
;
(* Rule 34, file HermesParser.grm, line 102 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.Public ) end : Hermes.valType))
;
(* Rule 35, file HermesParser.grm, line 103 *)
val _ = update_ yyact 35
(fn () => repr(let
in
( Hermes.Secret ) end : Hermes.valType))
;
(* Rule 36, file HermesParser.grm, line 107 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 1 : Hermes.valType
val d__2__ = peekVal 0 : Hermes.intType
in
( ((d__1__), (d__2__)) ) end : Hermes.varType))
;
(* Rule 37, file HermesParser.grm, line 110 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( fn t => Hermes.VarDecl (#1 (d__1__), t, #2 (d__1__)) ) end : Hermes.varType -> Hermes.decl))
;
(* Rule 38, file HermesParser.grm, line 112 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Hermes.exp
val d__4__ = peekVal 0 : (int*int)
in
( fn t => Hermes.ArrayDecl (#1 (d__1__), t, (d__3__), #2 (d__1__)) ) end : Hermes.varType -> Hermes.decl))
;
(* Rule 39, file HermesParser.grm, line 115 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 0 : Hermes.varType -> Hermes.decl
in
( fn t => [(d__1__) t] ) end : Hermes.varType -> Hermes.decl list))
;
(* Rule 40, file HermesParser.grm, line 117 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.varType -> Hermes.decl
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.varType -> Hermes.decl list
in
( fn t => (d__1__) t :: (d__3__) t ) end : Hermes.varType -> Hermes.decl list))
;
(* Rule 41, file HermesParser.grm, line 120 *)
val _ = update_ yyact 41
(fn () => repr(let
in
( [] ) end : Hermes.decl list))
;
(* Rule 42, file HermesParser.grm, line 122 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 3 : Hermes.varType
val d__2__ = peekVal 2 : Hermes.varType -> Hermes.decl list
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Hermes.decl list
in
( (d__2__) (d__1__) @ (d__4__) ) end : Hermes.decl list))
;
(* Rule 43, file HermesParser.grm, line 124 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : string*(int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Hermes.decl list
in
( Hermes.ConstDecl (#1 (d__2__), #1 (d__4__), (d__1__)) :: (d__6__)) end : Hermes.decl list))
;
(* Rule 44, file HermesParser.grm, line 127 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.Add ) end : Hermes.updateOp))
;
(* Rule 45, file HermesParser.grm, line 128 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.Sub ) end : Hermes.updateOp))
;
(* Rule 46, file HermesParser.grm, line 129 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.XorWith ) end : Hermes.updateOp))
;
(* Rule 47, file HermesParser.grm, line 130 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.RoL ) end : Hermes.updateOp))
;
(* Rule 48, file HermesParser.grm, line 131 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.RoR ) end : Hermes.updateOp))
;
(* Rule 49, file HermesParser.grm, line 134 *)
val _ = update_ yyact 49
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Hermes.Skip ) end : Hermes.stat))
;
(* Rule 50, file HermesParser.grm, line 136 *)
val _ = update_ yyact 50
(fn () => repr(let
val d__1__ = peekVal 3 : Hermes.lVal
val d__2__ = peekVal 2 : Hermes.updateOp
val d__3__ = peekVal 1 : Hermes.exp
val d__4__ = peekVal 0 : (int*int)
in
( Hermes.Update ((d__2__), (d__1__), (d__3__), (d__4__)) ) end : Hermes.stat))
;
(* Rule 51, file HermesParser.grm, line 138 *)
val _ = update_ yyact 51
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.lVal
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (int*int)
in
( Hermes.Update (Hermes.Add,
                                         (d__1__),
                                         Hermes.Const ("1", (d__2__)),
                                         (d__2__)) ) end : Hermes.stat))
;
(* Rule 52, file HermesParser.grm, line 143 *)
val _ = update_ yyact 52
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.lVal
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (int*int)
in
( Hermes.Update (Hermes.Sub,
                                         (d__1__),
                                         Hermes.Const ("1", (d__2__)),
                                         (d__2__)) ) end : Hermes.stat))
;
(* Rule 53, file HermesParser.grm, line 148 *)
val _ = update_ yyact 53
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : (int*int)
val d__3__ = peekVal 4 : Hermes.exp
val d__4__ = peekVal 3 : (int*int)
val d__5__ = peekVal 2 : Hermes.stat
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Hermes.stat
in
( Hermes.If ((d__3__), (d__5__), (d__7__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 54, file HermesParser.grm, line 150 *)
val _ = update_ yyact 54
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : (int*int)
val d__3__ = peekVal 2 : Hermes.exp
val d__4__ = peekVal 1 : (int*int)
val d__5__ = peekVal 0 : Hermes.stat
in
(
			  case (d__5__) of
			    Hermes.Update (uop,lv,ex,p) =>
			      if isComparison (d__3__) then
			        Hermes.Update
				  (uop, lv,
				   Hermes.Bin (Hermes.BAnd, (d__3__), ex, (d__1__)), p)
		              else
			        Hermes.Update
				  (uop, lv,
				   Hermes.Bin
				     (Hermes.BAnd,
				        Hermes.Bin
				         (Hermes.Neq, (d__3__),
					  Hermes.Const ("0",(d__2__)), (d__2__)),
				      ex, (d__1__)),
				   p)
		          | Hermes.Swap (lv1, lv2,p) =>
			       Hermes.CondSwap ((d__3__), lv1, lv2, (d__1__))
			  | _ => Hermes.If ((d__3__), (d__5__), Hermes.Skip, (d__1__))
			) end : Hermes.stat))
;
(* Rule 55, file HermesParser.grm, line 172 *)
val _ = update_ yyact 55
(fn () => repr(let
val d__1__ = peekVal 3 : Hermes.lVal
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Hermes.lVal
val d__4__ = peekVal 0 : (int*int)
in
( Hermes.Swap ((d__1__), (d__3__), (d__2__)) ) end : Hermes.stat))
;
(* Rule 56, file HermesParser.grm, line 174 *)
val _ = update_ yyact 56
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : Hermes.decl list
val d__3__ = peekVal 1 : Hermes.stat list
val d__4__ = peekVal 0 : (int*int)
in
( Hermes.Block ((d__2__), (d__3__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 57, file HermesParser.grm, line 176 *)
val _ = update_ yyact 57
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : (int*int)
val d__3__ = peekVal 6 : string*(int*int)
val d__4__ = peekVal 5 : (int*int)
val d__5__ = peekVal 4 : Hermes.exp
val d__6__ = peekVal 3 : (int*int)
val d__7__ = peekVal 2 : Hermes.exp
val d__8__ = peekVal 1 : (int*int)
val d__9__ = peekVal 0 : Hermes.stat
in
( Hermes.For (#1 (d__3__), (d__5__), (d__7__), (d__9__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 58, file HermesParser.grm, line 178 *)
val _ = update_ yyact 58
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Hermes.lVal list
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : (int*int)
in
( Hermes.Call (#1 (d__2__), (d__4__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 59, file HermesParser.grm, line 180 *)
val _ = update_ yyact 59
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Hermes.lVal list
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : (int*int)
in
( Hermes.Uncall (#1 (d__2__), (d__4__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 60, file HermesParser.grm, line 182 *)
val _ = update_ yyact 60
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Hermes.exp
val d__3__ = peekVal 0 : (int*int)
in
( Hermes.Assert ((d__2__), (d__1__)) ) end : Hermes.stat))
;
(* Rule 61, file HermesParser.grm, line 184 *)
val _ = update_ yyact 61
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.stat
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.stat
in
( Hermes.Block ([],[(d__1__),(d__3__),Hermes.R (d__1__)],(d__2__)) ) end : Hermes.stat))
;
(* Rule 62, file HermesParser.grm, line 187 *)
val _ = update_ yyact 62
(fn () => repr(let
in
( [] ) end : Hermes.stat list))
;
(* Rule 63, file HermesParser.grm, line 188 *)
val _ = update_ yyact 63
(fn () => repr(let
val d__1__ = peekVal 1 : Hermes.stat
val d__2__ = peekVal 0 : Hermes.stat list
in
( (d__1__) :: (d__2__) ) end : Hermes.stat list))
;
(* Rule 64, file HermesParser.grm, line 191 *)
val _ = update_ yyact 64
(fn () => repr(let
val d__1__ = peekVal 1 : Hermes.varType
val d__2__ = peekVal 0 : string*(int*int)
in
( [Hermes.VarArg (#1 (d__2__), (d__1__), #2 (d__2__))] ) end : Hermes.arg list))
;
(* Rule 65, file HermesParser.grm, line 193 *)
val _ = update_ yyact 65
(fn () => repr(let
val d__1__ = peekVal 3 : Hermes.varType
val d__2__ = peekVal 2 : string*(int*int)
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : (int*int)
in
( [Hermes.ArrayArg (#1 (d__2__), (d__1__),#2 (d__2__))] ) end : Hermes.arg list))
;
(* Rule 66, file HermesParser.grm, line 195 *)
val _ = update_ yyact 66
(fn () => repr(let
val d__1__ = peekVal 2 : Hermes.arg list
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Hermes.arg list
in
( (d__1__) @ (d__3__) ) end : Hermes.arg list))
;
(* Rule 67, file HermesParser.grm, line 199 *)
val _ = update_ yyact 67
(fn () => repr(let
val d__1__ = peekVal 4 : string*(int*int)
val d__2__ = peekVal 3 : (int*int)
val d__3__ = peekVal 2 : Hermes.arg list
val d__4__ = peekVal 1 : (int*int)
val d__5__ = peekVal 0 : Hermes.stat
in
( (#1 (d__1__), (d__3__), (d__5__), (d__2__)) ) end : Hermes.procedure))
;
(* Rule 68, file HermesParser.grm, line 202 *)
val _ = update_ yyact 68
(fn () => repr(let
val d__1__ = peekVal 1 : Hermes.procedure
val d__2__ = peekVal 0 : (int*int)
in
( [(d__1__)] ) end : Hermes.program))
;
(* Rule 69, file HermesParser.grm, line 204 *)
val _ = update_ yyact 69
(fn () => repr(let
val d__1__ = peekVal 1 : Hermes.procedure
val d__2__ = peekVal 0 : Hermes.program
in
( (d__1__) :: (d__2__) ) end : Hermes.program))
;
(* Entry Program *)
val _ = update_ yyact 70 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Program lexer lexbuf = yyparse yytables 1 lexer lexbuf;
